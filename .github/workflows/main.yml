# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on: [pull_request]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
 linting:
    name: Linting and formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 
        uses: actions/checkout@v1
      - name: Set up Python 3.9
        uses: actions/setup-python@v1
        with:
          python-version: 3.9.18
      - name: Install Poetry
        uses: snok/install-poetry@v1.3.3
        with:
          virtualenvs-create: false
          virtualenvs-in-project: true
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-venv-
      - name: Install dependencies
        run: |
          poetry env use 3.9
          poetry install
      - name: Run black, ruff
        run: |
          poetry run black --check .
          poetry run ruff check .
      - name: Run mypy
        run: |
          poetry run mypy .
 
 test:
    name: Run tests & get coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 
        uses: actions/checkout@v1
      - name: Set up Python 3.9
        uses: actions/setup-python@v1
        with:
          python-version: 3.9.18
      - name: Set up poetry
        uses: snok/install-poetry@v1.3.3
      - name: Set up cache
        uses: actions/cache@v1
        with:
          path: .venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-venv-
      - name: Install dependencies
        run: |
          poetry env use 3.9
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
          poetry install
      - name: Test and generate coverage report
        run: |
          poetry run pytest tests/
